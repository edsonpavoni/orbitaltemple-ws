---
import BaseLayout from '../layouts/BaseLayout.astro';
---

<BaseLayout title="Admin - Orbital Temple">
  <div class="admin-container">
    <h1>Name Ascension Admin</h1>

    <div class="stats">
      <div class="stat-card">
        <h3>Pending</h3>
        <p class="stat-number" id="pending-count">-</p>
      </div>
      <div class="stat-card">
        <h3>Sent</h3>
        <p class="stat-number" id="sent-count">-</p>
      </div>
      <div class="stat-card">
        <h3>Confirmed</h3>
        <p class="stat-number" id="confirmed-count">-</p>
      </div>
    </div>

    <div class="controls">
      <input
        type="text"
        id="search"
        placeholder="Search by name or email..."
        class="search-input"
      />
      <select id="filter" class="filter-select">
        <option value="all">All Status</option>
        <option value="pending">Pending</option>
        <option value="sent">Sent</option>
        <option value="confirmed">Confirmed</option>
        <option value="deleted">Deleted</option>
      </select>
      <button id="refresh" class="btn-refresh">Refresh</button>
      <button id="export-csv" class="btn-export">↓ Export Unsent CSV</button>
      <label for="upload-csv" class="btn-upload">
        ↑ Upload Confirmed CSV
        <input type="file" id="upload-csv" accept=".csv" style="display: none;" />
      </label>
    </div>

    <div id="loading" class="loading">Loading names...</div>
    <div id="error" class="error" style="display: none;"></div>

    <table id="names-table" style="display: none;">
      <thead>
        <tr>
          <th style="width: 60px; text-align: center;">Status</th>
          <th style="width: 200px;">Name</th>
          <th>Details</th>
          <th style="width: 60px; text-align: center;">Country</th>
          <th style="width: 240px; text-align: center;">Actions</th>
        </tr>
      </thead>
      <tbody id="names-tbody">
      </tbody>
    </table>
  </div>
</BaseLayout>

<style>
  .admin-container {
    max-width: 1400px;
    margin: 0 auto;
    padding: 2rem;
    color: white;
  }

  h1 {
    text-align: center;
    margin-bottom: 2rem;
    font-size: 2.5rem;
  }

  .stats {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1rem;
    margin-bottom: 2rem;
  }

  .stat-card {
    background: rgba(255, 255, 255, 0.05);
    padding: 1.5rem;
    border-radius: 8px;
    text-align: center;
  }

  .stat-card h3 {
    margin: 0 0 0.5rem 0;
    font-size: 1rem;
    opacity: 0.7;
  }

  .stat-number {
    margin: 0;
    font-size: 2.5rem;
    font-weight: bold;
  }

  .controls {
    display: flex;
    gap: 1rem;
    margin-bottom: 2rem;
    flex-wrap: wrap;
  }

  .search-input, .filter-select {
    flex: 1;
    min-width: 200px;
    padding: 0.75rem;
    background: rgba(255, 255, 255, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 4px;
    color: white;
    font-size: 1rem;
  }

  .search-input::placeholder {
    color: rgba(255, 255, 255, 0.5);
  }

  .btn-refresh, .btn-export, .btn-upload {
    padding: 0.75rem 1.5rem;
    background: rgba(255, 255, 255, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 4px;
    color: white;
    cursor: pointer;
    font-size: 1rem;
    white-space: nowrap;
  }

  .btn-refresh:hover, .btn-export:hover, .btn-upload:hover {
    background: rgba(255, 255, 255, 0.2);
  }

  .btn-export {
    background: rgba(76, 175, 80, 0.2);
    border-color: rgba(76, 175, 80, 0.4);
    color: #4caf50;
  }

  .btn-export:hover {
    background: rgba(76, 175, 80, 0.3);
  }

  .btn-upload {
    background: rgba(33, 150, 243, 0.2);
    border-color: rgba(33, 150, 243, 0.4);
    color: #2196f3;
    display: inline-block;
  }

  .btn-upload:hover {
    background: rgba(33, 150, 243, 0.3);
  }

  .loading, .error {
    text-align: center;
    padding: 2rem;
    font-size: 1.2rem;
  }

  .error {
    color: #ff6b6b;
  }

  table {
    width: 100%;
    border-collapse: collapse;
    background: rgba(255, 255, 255, 0.05);
    border-radius: 8px;
    overflow: hidden;
  }

  thead {
    background: rgba(255, 255, 255, 0.1);
  }

  th, td {
    padding: 1.2rem 1rem;
    text-align: left;
    border-bottom: 1px solid rgba(255, 255, 255, 0.2);
  }

  th {
    font-weight: 600;
    font-size: 0.75rem;
    text-transform: uppercase;
    letter-spacing: 1px;
    padding: 1rem;
    color: rgba(255, 255, 255, 0.7);
    vertical-align: middle;
  }

  td {
    font-size: 1rem;
    line-height: 1.4;
    vertical-align: middle;
  }

  tbody tr {
    transition: background 0.15s ease;
  }

  tbody tr:hover {
    background: rgba(255, 255, 255, 0.03);
  }

  /* Status column - colored circles - GLOBAL for dynamic content */
  :global(.status-circle) {
    width: 14px;
    height: 14px;
    border-radius: 50%;
    display: inline-block;
    box-shadow: 0 0 0 1px rgba(255, 255, 255, 0.2);
  }

  :global(.status-circle.pending) {
    background: rgba(255, 255, 255, 0.9);
  }

  :global(.status-circle.sent) {
    background: #ffc107;
    box-shadow: 0 0 0 1px rgba(255, 193, 7, 0.3);
  }

  :global(.status-circle.confirmed) {
    background: #4caf50;
    box-shadow: 0 0 0 1px rgba(76, 175, 80, 0.3);
  }

  :global(.status-circle.deleted) {
    background: #666666;
    box-shadow: 0 0 0 1px rgba(102, 102, 102, 0.3);
  }

  /* Name column - GLOBAL for dynamic content */
  :global(.name-cell) {
    font-size: 16px;
    font-weight: 500;
    color: white;
  }

  /* Details column - GLOBAL for dynamic content */
  :global(.details-cell) {
    display: flex;
    flex-direction: column;
    gap: 0.3rem;
  }

  :global(.detail-email) {
    font-size: 16px;
    color: rgba(255, 255, 255, 0.8);
  }

  :global(.detail-ip) {
    font-size: 12px;
    color: rgba(255, 255, 255, 0.5);
  }

  :global(.detail-time) {
    font-size: 10px;
    color: rgba(255, 255, 255, 0.4);
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .status-badge {
    display: inline-flex;
    align-items: center;
    gap: 0.4rem;
    padding: 0.4rem 0.9rem;
    border-radius: 14px;
    font-size: 0.9rem;
    font-weight: 600;
    letter-spacing: 0.3px;
  }

  .status-icon {
    font-size: 1rem;
    line-height: 1;
  }

  .status-pending {
    background: rgba(255, 193, 7, 0.2);
    color: #ffc107;
  }

  .status-sent {
    background: rgba(33, 150, 243, 0.2);
    color: #2196f3;
  }

  .status-confirmed {
    background: rgba(76, 175, 80, 0.2);
    color: #4caf50;
  }

  /* Actions column - GLOBAL for dynamic content */
  :global(.actions) {
    display: flex;
    gap: 1rem;
    justify-content: center;
    align-items: center;
  }

  :global(.btn-action) {
    background: none;
    border: none;
    padding: 0;
    color: white;
    cursor: pointer;
    font-size: 14px;
    font-weight: 400;
    text-decoration: underline;
    transition: opacity 0.15s ease;
  }

  :global(.btn-action:hover:not(:disabled)) {
    opacity: 0.7;
  }

  :global(.btn-action:disabled) {
    opacity: 0.3;
    cursor: not-allowed;
    text-decoration: none;
  }

  :global(.btn-delete) {
    color: #ff6b6b;
  }

  :global(.btn-delete:hover:not(:disabled)) {
    color: #ff5252;
  }

  .timestamp {
    font-size: 0.85rem;
    opacity: 0.8;
  }

  /* Country flag sizing */
  td[title] {
    font-size: 1.8rem;
  }

  .ip-info {
    display: inline-block;
    cursor: help;
    margin-left: 0.5rem;
    font-size: 0.85rem;
    opacity: 0.6;
    transition: opacity 0.2s;
    position: relative;
  }

  .ip-info:hover {
    opacity: 1;
  }

  .ip-tooltip {
    visibility: hidden;
    background-color: rgba(0, 0, 0, 0.9);
    color: white;
    text-align: center;
    padding: 0.5rem 0.75rem;
    border-radius: 4px;
    position: absolute;
    z-index: 1000;
    bottom: 125%;
    left: 50%;
    transform: translateX(-50%);
    white-space: nowrap;
    font-size: 0.85rem;
    opacity: 0;
    transition: opacity 0.2s;
  }

  .ip-info:hover .ip-tooltip {
    visibility: visible;
    opacity: 1;
  }

  .ip-tooltip::after {
    content: "";
    position: absolute;
    top: 100%;
    left: 50%;
    margin-left: -5px;
    border-width: 5px;
    border-style: solid;
    border-color: rgba(0, 0, 0, 0.9) transparent transparent transparent;
  }
</style>

<script>
  const FUNCTIONS_URL = 'https://us-central1-orbital-temple.cloudfunctions.net';

  interface NameRecord {
    id: string;
    name: string;
    email: string;
    status: 'pending' | 'sent' | 'confirmed' | 'deleted';
    createdAt: { _seconds: number };
    sentAt?: { _seconds: number };
    confirmedAt?: { _seconds: number };
    deletedAt?: { _seconds: number };
    ipAddress?: string;
    country?: string;
    countryCode?: string;
  }

  let allNames: NameRecord[] = [];
  let filteredNames: NameRecord[] = [];

  async function loadNames() {
    const loading = document.getElementById('loading');
    const error = document.getElementById('error');
    const table = document.getElementById('names-table');

    if (loading) loading.style.display = 'block';
    if (error) error.style.display = 'none';
    if (table) table.style.display = 'none';

    try {
      const response = await fetch(`${FUNCTIONS_URL}/getNames`);

      if (!response.ok) {
        throw new Error('Failed to fetch names');
      }

      const data = await response.json();
      allNames = data.names;
      filteredNames = allNames;

      updateStats();
      renderTable();

      if (loading) loading.style.display = 'none';
      if (table) table.style.display = 'table';
    } catch (err) {
      console.error('Error loading names:', err);
      if (loading) loading.style.display = 'none';
      if (error) {
        error.textContent = 'Failed to load names. Please check console for details.';
        error.style.display = 'block';
      }
    }
  }

  function updateStats() {
    const pending = allNames.filter(n => n.status === 'pending').length;
    const sent = allNames.filter(n => n.status === 'sent').length;
    const confirmed = allNames.filter(n => n.status === 'confirmed').length;

    const pendingEl = document.getElementById('pending-count');
    const sentEl = document.getElementById('sent-count');
    const confirmedEl = document.getElementById('confirmed-count');

    if (pendingEl) pendingEl.textContent = pending.toString();
    if (sentEl) sentEl.textContent = sent.toString();
    if (confirmedEl) confirmedEl.textContent = confirmed.toString();
  }

  function formatTimestamp(timestamp?: { _seconds: number }): string {
    if (!timestamp) return '-';
    const date = new Date(timestamp._seconds * 1000);
    const now = new Date();
    const diffMs = now.getTime() - date.getTime();
    const diffMins = Math.floor(diffMs / 60000);
    const diffHours = Math.floor(diffMs / 3600000);
    const diffDays = Math.floor(diffMs / 86400000);

    // Show relative time for recent timestamps
    if (diffMins < 1) return 'just now';
    if (diffMins < 60) return `${diffMins}m ago`;
    if (diffHours < 24) return `${diffHours}h ago`;
    if (diffDays < 7) return `${diffDays}d ago`;

    // Show short date format for older timestamps
    return date.toLocaleDateString('en-US', {
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  }

  function getStatusIcon(status: string): string {
    switch (status) {
      case 'pending': return '⏳';
      case 'sent': return '📡';
      case 'confirmed': return '✓';
      default: return '';
    }
  }

  function getCountryFlag(countryCode?: string): string {
    if (!countryCode || countryCode === 'XX') return '🌐';

    // Convert country code to flag emoji
    // Each country code letter corresponds to a regional indicator symbol
    const codePoints = countryCode
      .toUpperCase()
      .split('')
      .map(char => 127397 + char.charCodeAt(0));

    return String.fromCodePoint(...codePoints);
  }

  function renderTable() {
    const tbody = document.getElementById('names-tbody');
    if (!tbody) return;

    tbody.innerHTML = '';

    filteredNames.forEach(name => {
      const tr = document.createElement('tr');
      const countryFlag = getCountryFlag(name.countryCode);
      const countryName = name.country || 'Unknown';
      const ipAddress = name.ipAddress || 'N/A';

      tr.innerHTML = `
        <td style="text-align: center;">
          <span class="status-circle ${name.status}" title="${name.status}"></span>
        </td>
        <td>
          <div class="name-cell">${name.name}</div>
        </td>
        <td>
          <div class="details-cell">
            <div class="detail-email">${name.email}</div>
            <div class="detail-ip">IP: ${ipAddress}</div>
            <div class="detail-time">Submitted ${formatTimestamp(name.createdAt)}</div>
          </div>
        </td>
        <td style="text-align: center;" title="${countryName}">
          ${countryFlag}
        </td>
        <td class="actions" style="vertical-align: middle;">
          <button class="btn-action" data-id="${name.id}" data-status="sent" ${name.status !== 'pending' ? 'disabled' : ''}>
            Send
          </button>
          <button class="btn-action" data-id="${name.id}" data-status="confirmed" ${name.status !== 'sent' ? 'disabled' : ''}>
            Confirmed
          </button>
          <button class="btn-action btn-delete" data-id="${name.id}" data-status="deleted" ${name.status === 'deleted' ? 'disabled' : ''}>
            Delete
          </button>
        </td>
      `;

      tbody.appendChild(tr);
    });

    // Add event listeners to buttons
    const buttons = tbody.querySelectorAll('.btn-action');
    buttons.forEach(button => {
      button.addEventListener('click', handleStatusUpdate);
    });
  }

  async function handleStatusUpdate(event: Event) {
    const button = event.target as HTMLButtonElement;
    const nameId = button.dataset.id;
    const status = button.dataset.status;

    if (!nameId || !status) return;

    // Show confirmation dialog for delete action
    if (status === 'deleted') {
      const confirmed = confirm('Are you sure you want to delete this name? This action cannot be undone.');
      if (!confirmed) return;
    }

    const originalText = button.textContent;
    button.disabled = true;
    button.textContent = 'Updating...';

    try {
      const response = await fetch(`${FUNCTIONS_URL}/updateNameStatus`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ nameId, status }),
      });

      if (!response.ok) {
        throw new Error('Failed to update status');
      }

      // Reload data
      await loadNames();
    } catch (err) {
      console.error('Error updating status:', err);
      alert('Failed to update status');
      button.disabled = false;
      button.textContent = originalText || 'Update';
    }
  }

  function applyFilters() {
    const searchInput = document.getElementById('search') as HTMLInputElement;
    const filterSelect = document.getElementById('filter') as HTMLSelectElement;

    const searchTerm = searchInput?.value.toLowerCase() || '';
    const statusFilter = filterSelect?.value || 'all';

    filteredNames = allNames.filter(name => {
      const matchesSearch = name.name.toLowerCase().includes(searchTerm) ||
                           name.email.toLowerCase().includes(searchTerm);
      const matchesStatus = statusFilter === 'all' || name.status === statusFilter;

      return matchesSearch && matchesStatus;
    });

    renderTable();
  }

  function exportUnsentCSV() {
    // Get all names that are not confirmed (pending or sent)
    const unsentNames = allNames.filter(n => n.status === 'pending' || n.status === 'sent');

    if (unsentNames.length === 0) {
      alert('No unsent names to export!');
      return;
    }

    // Create CSV content
    const headers = ['Name', 'Email', 'Status', 'Submitted Date'];
    const rows = unsentNames.map(name => [
      name.name,
      name.email,
      name.status,
      formatTimestamp(name.createdAt)
    ]);

    const csvContent = [
      headers.join(','),
      ...rows.map(row => row.map(cell => `"${cell}"`).join(','))
    ].join('\n');

    // Download CSV
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    const url = URL.createObjectURL(blob);

    link.setAttribute('href', url);
    link.setAttribute('download', `unsent-names-${new Date().toISOString().split('T')[0]}.csv`);
    link.style.visibility = 'hidden';

    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);

    console.log(`Exported ${unsentNames.length} unsent names`);
  }

  async function handleCSVUpload(event: Event) {
    const input = event.target as HTMLInputElement;
    const file = input.files?.[0];

    if (!file) return;

    try {
      const text = await file.text();
      const lines = text.split('\n').filter(line => line.trim());

      // Skip header row
      const dataLines = lines.slice(1);

      let successCount = 0;
      let errorCount = 0;

      for (const line of dataLines) {
        // Parse CSV line (basic implementation)
        const match = line.match(/"([^"]+)","([^"]+)"/);
        if (!match) continue;

        const name = match[1];
        const email = match[2];

        // Find the name in our data
        const nameRecord = allNames.find(n =>
          n.name === name && n.email === email
        );

        if (nameRecord) {
          try {
            // Update to confirmed status
            const response = await fetch(`${FUNCTIONS_URL}/updateNameStatus`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({
                nameId: nameRecord.id,
                status: 'confirmed'
              }),
            });

            if (response.ok) {
              successCount++;
            } else {
              errorCount++;
            }
          } catch (err) {
            console.error(`Error updating ${name}:`, err);
            errorCount++;
          }
        }
      }

      alert(`Upload complete!\n✓ ${successCount} names confirmed\n✗ ${errorCount} errors`);

      // Reload data
      await loadNames();
    } catch (err) {
      console.error('Error processing CSV:', err);
      alert('Failed to process CSV file');
    }

    // Reset input
    input.value = '';
  }

  // Event listeners
  document.addEventListener('DOMContentLoaded', () => {
    loadNames();

    const searchInput = document.getElementById('search');
    const filterSelect = document.getElementById('filter');
    const refreshButton = document.getElementById('refresh');
    const exportButton = document.getElementById('export-csv');
    const uploadInput = document.getElementById('upload-csv');

    searchInput?.addEventListener('input', applyFilters);
    filterSelect?.addEventListener('change', applyFilters);
    refreshButton?.addEventListener('click', loadNames);
    exportButton?.addEventListener('click', exportUnsentCSV);
    uploadInput?.addEventListener('change', handleCSVUpload);
  });
</script>
